initialize() {
    defineConstant("M", 0.05);    //radius of mate choice/migration circle
    defineConstant("D", 1.0);    //fitness of drive
    // */

    defineConstant("P", 10000);   // initial population
    defineConstant("R", 0.02);   //radius of interaction circle

    initializeSLiMOptions(dimensionality="xy");
    initializeMutationRate( 0.0 );  //mutation rate
    initializeMutationType("m1", 0.5, "f", 0.0);
    initializeMutationType("m2", 0.5, "f", 0.0); //name, dominance coefficient, fixed fitness effect, fixed fitness effect level
    m2.convertToSubstitution = F;
    initializeMutationType("m3", 0.5, "f", 0.0); //neutral mutation type
    initializeGenomicElementType("g1", m1, 1.0); //for element g1, all mutations (with proportion 1.0)
    initializeGenomicElement(g1, 0, 2); //make genome size
    initializeRecombinationRate(0.0); //homologous recombination
    // spatial competition
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance= R);
    i1.setInteractionFunction("f", 1.0);
    // spatial mate choice
    initializeInteractionType(2, "xy", reciprocal=T, maxDistance= M);
    i2.setInteractionFunction("f", 1.0);
}


  1 late() {
   sim.addSubpop("p1", P);
   i = p1.individuals;
   for (ind in i)
     ind.setSpatialPosition(p1.pointUniform());
     distance = i.x;
     left = i[distance < 0.5];
     left.genomes.addNewDrawnMutation(m2, 2);
  }


  1: late() { //evaluate interactions before fitness callbacks
    i1.evaluate();
    i2.evaluate();
  }


  fitness(NULL) {
    totalStrength = i1.totalOfNeighborStrengths(individual);

   return 10 / (9*(totalStrength/(P * PI * R^2)) + 1);

  }

  fitness(m2) {
      count = sum(c(genome1, genome2).countOfMutationsOfType(m2)); //method counts the mutations of type m2 in both genomes, returns a vector; l

     if ((count == 2) & homozygous)
       return D;
     else if (count == 1) //hetero
       return sqrt(D);
     else
         return 1.0; //wildtype homozygous
  }


  1: mateChoice() {
    return weights*i2.strength(individual); // This call asks i2 to evaluate the strength of interaction between the first parent (individual) and all other individuals in its subpopulation. The result is returned as a vector of mating weights between the first parent and all other individuals.
  }

    modifyChild() {
  // Reprising boundary conditions
     do {
      r = rexp(1, M);
      theta = runif(1, 0, 2*PI);
       pos = parent1.spatialPosition + c(r*sin(theta),r*cos(theta));
    } while (!p1.pointInBounds(pos));
    child.setSpatialPosition(pos);
    return T;
    }

  2: {
  p1.setSubpopulationSize(asInteger(round(sum(p1.cachedFitness(NULL)))));
  }

  1: late() {
    // Color carriers of the gene drive so we can see them
    for (ind in p1.individuals)
        if (ind.countOfMutationsOfType(m2) > 0)
            ind.color = "cornflowerblue";
  }

1 {
    cat("Output key: A-freq, A-freq left, A-freq right, count, gen-number\n");
}

1:60 late() {
    all = sim.subpopulations.individuals;

    driveA = sim.mutationsOfType(m2);

    driveA_left = 0;
    total_left = 0;
    driveA_right = 0;
    total_right = 0;

    driveA_freq = 0;
    if (driveA.size()) {
        driveA_freq = sim.mutationFrequencies(p1, driveA);
        for (ind in all) {
            if (ind.x < 0.5) {
                driveA_left = driveA_left + ind.countOfMutationsOfType(m2);
                total_left = total_left + 2;
            }
            else {
                driveA_right = driveA_right + ind.countOfMutationsOfType(m2);
                total_right = total_right + 2;
            }
        }
    }

    left_rate = 0.0;
    if (total_left)
        left_rate = driveA_left / total_left;

    right_rate = 0.0;
    if (total_right)
        right_rate = driveA_right / total_right;


    cat("#OUTPUT: " + driveA_freq + " " + left_rate + " " + right_rate + " ");
    cat(" " + p1.individualCount + " " + sim.generation + "\n");

    cat("PYTHON:: " + driveA_freq + " " + left_rate + " " + right_rate + "\n");
}
