
initialize() {
    defineConstant("M", 0.01); //m migration
    defineConstant("D", 1.0); //d is the fitness parameter for the "payload" in homozygotes
    // */

    defineConstant("P", 10000);   // initial population
    defineConstant("I", 40000);   // gene drive introduction size
    initializeMutationRate(0);
    initializeMutationType("m1", 0.5, "f", 0.0);
    initializeMutationType("m2", 0.5, "f", 0.0);
    m2.convertToSubstitution = F;
    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElement(g1, 0, 2);
    initializeRecombinationRate(0.5);
}

// create subpopulations
1 late() {
    sim.addSubpop("p1", P);
    sim.addSubpop("p2", P);
    p1.setMigrationRates(p2, M);
    p2.setMigrationRates(p1, M);
}


fitness(NULL,p1) {
    return 10 / (9*(p1.individualCount/P) + 1);
}

fitness(NULL,p2) {
    return 10 / (9*(p2.individualCount/P) + 1);
}

fitness(m2) {
     count = sum(c(genome1, genome2).countOfMutationsOfType(m2)); //method counts the mutations of type m2 in both genomes, returns a vector;

    if ((count == 2) & homozygous)
        return D;
    else if (count == 1) //heterozygosity
        return sqrt(D);
    else
        return 1.0; //wildtype homozygous
   }

2: {
    p1.setSubpopulationSize(asInteger(round(sum(p1.cachedFitness(NULL))))); //population size at the end of every generation is equal to the sum of the individual fitness of each member
}

2: {
    p2.setSubpopulationSize(asInteger(round(sum(p2.cachedFitness(NULL))))); //population size at the end of every generation is equal to the sum of the individual fitness of each member
}

10 {
    p1.setSubpopulationSize(p1.individualCount + I);
}

10 late() {
    drop = sample(p1.individuals, I);
    drop.genomes.addNewDrawnMutation(m2, 2);
}

modifyChild() {
    return T;
}

1:30 late() {
    driveA = sim.mutationsOfType(m2);

    p1_freq = 0;
    p2_freq = 0;
    if (driveA.size()) {
        p1_freq = sim.mutationFrequencies(p1, driveA);
        p2_freq = sim.mutationFrequencies(p2, driveA);
    }
    combined_freq = (p1_freq * p1.individualCount + p2_freq * p2.individualCount)/(p1.individualCount + p2.individualCount);

    cat("#OUTPUT: ");
    cat(" " + p1.individualCount + " " + sim.generation + "\n");
    cat("p1,p2,combined: " + p1_freq + " " + p2_freq + " " + combined_freq + "\n");	
    cat("PYTHON:: " + combined_freq + " " + p1_freq + " " + p2_freq + "\n");
}

